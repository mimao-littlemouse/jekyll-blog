# 项目配置
# 项目文件 文件夹及其地址配置
# 注意：项目默认所在地址，就是配置文件所在目录 即( . )
# 项目源地址 可进行自定义（但 部署到 github上时，需保持该地址为 仓库根目录（即 顶级目录））
# source: .
# 目标地址 可进行自定义（无要求）（但 该目录 最好当作一个临时目录即可，通过复制至web服务器或其他地方 才是最佳选择）
# destination: ./_site
# 查找集合的 目录（默认：该配置文件所在目录）
# collections_dir: .
# plugins_dir 文件夹作用：获取一个字符串数组并按该顺序加载插件
# plugins_dir: _plugins 
# 模板 目录（默认：_layouts目录）
# layouts_dir: _layouts
# 数据 目录（默认 _data目录）
# data_dir: _data
# 代码片段 目录（默认：_includes）
# includes_dir: _includes
# 默认启用sass 并指定_sass目录为 sass文件存储的地址
# 可通过 style来指定生成项目之后 style.css的 呈现方式（默认：不压缩 为展开）
sass:
  sass_dir: _sass
  style: compressed
# 配置集合（默认如下）有关集合和front matter的defaults配置 放置在该配置文件的最下方（可在文件末尾处找到）
# collections:
#   posts:
#     output: true
# front matter的defaults配置
# defaults: []

# 处理文件或文件夹的配置
# 禁用非白名单插件，缓存到磁盘，并忽略符号链接
# safe 默认：false 不对插件进行禁用（但 部署到github上时，需设置为 true）
safe: false
# 配置生成目标的文件夹(即 目录)中 不包含的文件(即 目录)或文件夹
# 排除相对于站点源目录的文件或文件夹(即 目录)，不能是源目录之外的
# exclude 默认值如下:["Gemfile", "Gemfile.lock", "node_modules", "vendor/bundle/", "vendor/cache/", "vendor/gems/", "vendor/ruby/"]
# 其中，jekyll会默认排除以 .开头的文件 而.开头的文件夹还需自己在exclude中排除，如需添加带.开头的文件至目标文件夹(即 目录)中，需在include中添加
exclude:
  - script
  - docker_file
  - Gemfile
  - Gemfile.lock
  - mimao.gemspec
  - .editorconfig
  - .git
  - .github
  - .gitignore
  - .jekyll-cache
# 强制包含文件夹(即 目录)或文件
# 默认情况下会排除点文件，如需添加.文件(以.开头的文件)
# include 默认值如下：[".htaccess"]
# include:
#   - .htaccess
# 保留 非Jekyll生成的文件夹或文件
# keep_files: [".git", ".svn"]
# 设置 文件的编码 默认：utf-8
# encoding: "utf-8"
# 设置可用的 markdown扩展名(默认：markdown,mkdown,mkdn,mkd,md)
# markdown_ext: "markdown,mkdown,mkdn,mkd,md"
# 是否 启用 front matter严格模式（默认：false 不启用）
# 如果启用,则页面front matter(即：页面中的 --- yaml变量 --- 所包围的yaml变量)中出现YAML语法错误，则会导致构建失败
# strict_front_matter: false

# 内容过滤方面的配置
# 处理并呈现草稿帖子（默认：null 不进行呈现）
# show_drafts: null
# 限制要解析和发布的帖子数量（默认：0 不限制）
# limit_posts: 0
# 发布带有未来日期的帖子或集合文档（默认：false 不发布）
# future: false
# 渲染标记为未发布的帖子（默认：false 不渲染未发布的帖子）
# unpublished: false

# # 部署在 github上默认配置
# gist:
#   noscript: false

# 插件 
# 插件配置(gem依赖配置)
# 如果需要使用 插件需要在此配置 并在自定义的.gemspec文件中添加相关依赖
plugins:
  - jekyll-seo-tag # jekyll-seo-tag 
  - jekyll-feed # jekyll-feed 用于生成jekyll帖子(必要选项 title(或name)站点名称 description站点详细介绍 url站点地址 auther全局的作者信息  )
  - jekyll-sitemap  # jekyll-sitemap 站点地图 用于生成 sitemap.xml文件(必要选项 url站点地址（由于seo中已经定义，所以无需再次定义）)
  - jemoji # github风格的emoji
  - jekyll-avatar # 根据用户名自动生成 github上的头像（例如：{% avatar mimao-littlemouse %} 会生成：img标签 classlist有avatar avatar-small 高宽40px）
  - jekyll-redirect-from # 用于设置重定向的插件
  - rouge # markdown高亮显示的插件
  - jekyll-watch # 其用于修改文件，自动刷新）只需在 构建jekyll时，加上 --watch参数即可 运行jekyll时，默认加上了 --watch参数
  # github中 默认启用 不嫩禁用的插件
  - jekyll-coffeescript
  - jekyll-default-layout
  - jekyll-gist
  - jekyll-github-metadata
  - jekyll-optional-front-matter
  - jekyll-paginate
  - jekyll-readme-index
  - jekyll-titles-from-headings
  - jekyll-relative-links # 用于在markdown中配置相对链接，让 []() 中的相对链接起作用

# 配置插件 白名单（在 使用安全模式执行时 需要将插件添加到白名单，因为布置到github时，safe必须为true 即：必须开启安全模式 ）
# whitelist:
#   - jekyll-redirect-from

# 对插件 进行配置并选择性说明其用法
# jekyll-seo-tag 插件配置（该配置涉及到 下方插件配置，所以，应放置在 插件配置的最上方）
# 配置 SEO 标签选项（参见：官网 https://github.com/jekyll/jekyll-seo-tag ；文档地址 https://github.com/jekyll/jekyll-seo-tag/blob/master/docs）；
# 网页站点标题
title: Mi Mao
# 网页 简要描述（网站的描述 都是在 页面没有定义 title的时候，即：page.title没有定义的时候显示）
# 定义了 简要描述 title中优先显示简要描述 而不是 详细描述，但详细描述有利于 seo的搜索优化
# 优先级：page.title tagline description
tagline: nhao
# 网页 详细描述
description: 用起来更舒适
# 网站地址（默认：会是 site.github.url）
# 因为该项目会部署在 github上，所以url是github项目介绍地址
# 网站的完整URL。注意：默认情况下将使用site.github.url
url: "https://github.io/mimao-littlemouse/jekyll-blog"
github:
  url: "https://github.io/mimao-littlemouse/jekyll-blog"
# 全局配置 个人作者信息
author: 
  name: liuzhiqiang
# 配置 推特信息（默认以卡片的摘要方式呈现）(我没有，所以注释掉)
# twitter:
#   username: your username
#   card: summary
# 配置 脸书信息（由于没有用过 脸书，所以注释）
# facebook:
#   app_id: 1234
#   publisher: 1234
#   admins: 1234
# 搜索页面 查找该网站时，在组织一栏中 会显示的图标（该图标可以是 公司的图标 也可以是个人图标）
logo: /assets/logo.png
# 指定社交信息
social:
  # 如果用户或组织名称与站点名称不一致时，进行配置
  # 不同于 title站点名称时，才进行配置（默认：与title名称一致）
  name: MiMao LittleMouse
  # 一系列指向个人的社交媒体资料的链接
  links:
    - "https://github.com/mimao-littlemouse"
# 搜索控制台 或者 叫做站长工具的验证码通行码（由于 并未使用过，所以注释）
# 据介绍，该工具，可以提升网站在 浏览器中搜索的排名
# webmaster_verifications:
#   google: 1234
#   bing: 1234
#   alexa: 1234
#   yandex: 1234
#   baidu: 1234
#   facebook: 1234
lang: en
# jekyll-seo-tag 配置完成，开始下一个插件配置

# jekyll-feed 必要配置 已在seo配置的时候 配置过了（其他配置 在此配置）
feed:
  # 默认 帖子的限制为：20
  posts_limit: 20
# jekyll-feed 配置完成，开始下一个插件配置

# jekyll-sitemap 配置
# jekyll-sitemap 配置完成，开始下一个插件配置

# jempji 配置
# jempji 配置完成，开始下一个插件配置

# jekyll-avatar 配置(没有需要进行配置的，将解释该插件如何使用)
# 书写方式有一下几种：
  # 1.自己更改 头像高宽 {% avatar mimao-littlemouse size="45" %} size="45" 输出 classlist有avatar 高宽50px 
  # 也可这样：
  # {% assign user="mimao-littlemouse" %}
  # {% assign size=50 %}
  # {% avatar {{ user }} size=size %}
  # 其他参数：lazy {% avatar {{ user }} size=size lazy=true %}
# jekyll-avatar 配置完成，开始下一个插件配置

# jekyll-redirect-from 配置及用法
# 如果使用安全模式运行jekyll时，需要将该插件配置至 白名单
# 是否禁用 输出的redirects.json文件（默认为true 不禁用）
# redirect_from:
#   json: true
# 用法：（可以在 front matter中书写一下属性之一 或 在_config.yml中配置 front matter默认值）
# redirect_from：相对路径（如果 设置了url baseurl 则将设置的url地址作为前缀 所以该关键字值应是 相对路径）
# 注意：包含尾部斜杠的重定向将生成包含index.html的相应子目录，而不包含尾部斜杠则会生成不带扩展名和子目录的相应文件名
# redirect_to: 绝对路径(比如：https://www.github.com)
# 注意：如果将其作为模板,则在模板中可获得：page.redirect.to、page.redirect.from变量
# 用法示范：
# redirect_from:
#   - /post/page1/  生成index.html
#   - /post/page1/content  不生成index.html
# redirect_to: http://www.github.com
# jekyll-redirect-from 配置完成，开始下一个插件配置

# rouge 配置
# rouge 配置完成，开始下一个插件配置

# jekyll-watch 配置(没有配置)
# jekyll-watch 配置完成，开始下一个插件配置

# github上默认启用的 不能禁用的插件
# jekyll-coffeescript 配置
# jekyll-coffeescript 配置完成，开始下一个插件配置

# jekyll-default-layout 配置
# jekyll-default-layout 配置完成，开始下一个插件配置

# jekyll-gist 配置
# jekyll-gist 配置完成，开始下一个插件配置

# jekyll-github-metadata 配置
# jekyll-github-metadata 配置完成，开始下一个插件配置

# jekyll-optional-front-matter 配置
# jekyll-optional-front-matter 配置完成，开始下一个插件配置

# jekyll-paginate 配置
# jekyll-paginate 配置完成，开始下一个插件配置

# jekyll-readme-index 配置
# jekyll-readme-index 配置完成，开始下一个插件配置

# jekyll-titles-from-headings 配置
# titles_from_headings:
#   # 是否 启用（默认：启用）
#   enabled:     true
#   # 是否 剥离 标题（以免 渲染两次标题）
#   strip_title: false
#   # 将collections选项设置为true 则将推断出来的标题作为备用（因为 集合已经从文件名中推断出来了标题）
#   collections: false
# jekyll-titles-from-headings 配置完成，开始下一个插件配置

# jekyll-relative-links 配置
# relative_links:
#   # 是否 启用（默认：启用）
#   enabled: true
#   # 将collections选项设置为true 将启用集合项（包括帖子）的相对链接（默认：false 不启用）
#   collections: false
#   # exclude 排除文件或文件夹
#   exclude: []
# jekyll-relative-links 配置完成，开始下一个插件配置
# github上默认启用的 不能禁用的插件 配置结束

# 站点服务配置
# 将服务器与终端分离（默认：false 不分离）
# detach: false
# 站点 监听的端口（默认：4000）
# port: 4000
# 站点主机名（默认：localhost 即：127.0.0.1）
# host: 127.0.0.1
# 配置 部署之后的基础url(不包含域名或主机名的那部分 比如：https://www.github.com中后面那部分) 
# 如部署至 github仓库中 则需要配置仓库名 
# 部署至 github个人主页中可不配置
# baseurl: "/jekyll-blog"
# 显示目录列表，而不是加载索引文件（默认：false 不显示）
# show_dir_listing    : false


# 优化性能配置
# 启用实验性增量构建功能（默认：false  不启用）
# 增量构建只会重新构建已更改的帖子和页面，从而显著提高大型网站的性能，但在某些情况下也可能中断网站生成
# incremental: false  


# 帖子相关配置
# 为相关帖子制作索引（默认：false 不开启） 如果需要，则需要添加分类器重生插件（classifier-reborn）
# lsi: false
# 帖子摘录配置
excerpt_separator: "\n\n"


# 配置 转化器
# 配置 markdown 
# 指定 markdown的转化器（默认：kramdown）
# 指定 高亮插件（默认：rouge）
# highlighter: rouge
# markdown: kramdown
# 配置kramdown转换器
kramdown:
  # 指定 处理器（默认：GFM 为markdown处理器）
  # input: GFM
  auto_ids          : true
  entity_output     : as_char
  toc_levels        : [1, 2, 3, 4, 5, 6]
  smart_quotes      : lsquo,rsquo,ldquo,rdquo
  footnote_nr       : 1
  show_warnings     : false
  # 不忽视 换行符（false 则代表忽视）
  hard_wrap: true
  # fgm 怪癖（怪癖列表）
  # no_auto_typographic 使更接近github上的风格
  gfm_quirks: [paragraph_end,no_auto_typographic]
  # 配置表情符号
  # 允许在GFM中渲染表情符号(默认：false 不开启)
  gfm_emojis: true
  # 指定处理 math的引擎
  math_engine: mathjax
  # 启用 rouge高亮模式，但其外部样式还需根据 它所提供的css类名进行自定义
  syntax_highlighter: rouge
  syntax_highlighter_opts:
    line_numbers: null # 不设置行号
    default_lang: txt # 设置默认的语言为 文本
    

# 输出配置
# 配置 全局的永久链接样式（默认：date 帖子样式）（可以使用：页面中的前事项permalink或集合中可以使用其集合中的前事项来覆盖）
permalink: /:collection/:title/:year/:i_month/:i_day/:path
# 分页路径（默认：/page:num） 我这里不需要 注释掉
# paginate_path: /page:num 
# 在构建过程中使Jekyll的正常输出静音（默认：false  不静音（即：会输出日志））
# quiet: false
# 打印详细输出（默认：false 不详细输出）
# verbose: false
# 是否生成Liquid渲染配置文件以帮助您识别性能瓶颈（默认：false）
# profile: false


# 配置 liquid 输出和校验规则
# liquid:
#   error_mode        : warn
#   strict_filters    : false
#   strict_variables  : false


# 时区配置（默认：null 自动根据部署的服务器地址 进行设置）
# timezone: null


# 定义集合(即：内容合集)
# 使用 yaml的描点和引用 来简化集合中的配置
collection_default_option: &collection_default_option
  permalink: /articles/:collection/:title
  sort_by: index
  output: true
# 声明集合的文件夹
collections_dir: articles
# 声明集合中 对应集合文件夹(在集合文件夹中以_开头的方式命名)
# 这里无需定义label，在集合中有以文件名称 赋值的 label属性(index text的作用，在下面已注明)
collections:
  posts:
    index: 1000
    text: 帖子
  jekyll: 
    <<: *collection_default_option
    index: 0 # 右侧导航栏中的 菜单排序索引(以0开始，依次递增)
    text: jekyll # 右侧导航栏中的 菜单名称
  python: 
    <<: *collection_default_option
    index: 1
    text: python
  github:
    <<: *collection_default_option
    index: -1
    text: github
  
  
  

# 为 静态文件配置一定范围内(path路径指定范围(该路径可使用正则表达式表示))的 front matter 前事项，自定义前事项 可为前事项设置默认值(比如：title layout 等等设置默认值)
# 可使用 {{ site.static_files | where: "image", true }} 进行调用（使用where 配合 ）
defaults:
  - scope:
      path: "assets/img"
    values:
      image: true