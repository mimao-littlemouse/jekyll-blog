# 配置 SEO 标签选项（参见：官网 https://github.com/jekyll/jekyll-seo-tag ；文档地址 https://github.com/jekyll/jekyll-seo-tag/blob/master/docs）；
# 网页站点标题
title: Mi Mao
# 网页 简要描述（网站的描述 都是在 页面没有定义 title的时候，即：page.title没有定义的时候显示）
# 定义了 简要描述 title中优先显示简要描述 而不是 详细描述，但详细描述有利于 seo的搜索优化
# 优先级：page.title tagline description
tagline: nhao
# 网页 详细描述
description: 用起来更舒适
# 网站地址（默认：会是 site.github.url）
# 因为该项目会部署在 github上，所以url是github项目介绍地址
# 网站的完整URL。注意：默认情况下将使用site.github.url
url: "https://github.io/mimao-littlemouse/jekyll-blog"
github:
  url: "https://github.io/mimao-littlemouse/jekyll-blog"
  
# 全局配置 个人作者信息
author: 
  name: liuzhiqiang
# 配置 推特信息（默认以卡片的摘要方式呈现）(我没有，所以注释掉)
# twitter:
#   username: your username
#   card: summary
# 配置 脸书信息（由于没有用过 脸书，所以注释）
# facebook:
#   app_id: 1234
#   publisher: 1234
#   admins: 1234
# 搜索页面 查找该网站时，在组织一栏中 会显示的图标（该图标可以是 公司的图标 也可以是个人图标）
logo: /assets/logo.png
# 指定社交信息
social:
  # 如果用户或组织名称与站点名称不一致时，进行配置
  # 不同于 title站点名称时，才进行配置（默认：与title名称一致）
  name: MiMao LittleMouse
  # 一系列指向个人的社交媒体资料的链接
  links:
    - "https://github.com/mimao-littlemouse/"
# 搜索控制台 或者 叫做站长工具的验证码通行码（由于 并未使用过，所以注释）
# 据介绍，该工具，可以提升网站在 浏览器中搜索的排名
# webmaster_verifications:
#   google: 1234
#   bing: 1234
#   alexa: 1234
#   yandex: 1234
#   baidu: 1234
#   facebook: 1234

lang: en

# 配置 部署之后的基础url （即：仓库名 或 主页中可不配置）
# 开发环境中 不启用
# baseurl: /jekyll-blog

# 插件配置(gem依赖配置)
# 如果需要使用 插件需要在此配置 并在自定义的.gemspec文件中添加相关依赖
plugins:
  - jekyll-seo-tag # jekyll-seo-tag 
  - jekyll-feed # jekyll-feed 用于生成jekyll帖子(必要选项 title(或name)站点名称 description站点详细介绍 url站点地址 auther全局的作者信息  )
  - jekyll-sitemap  # jekyll-sitemap 站点地图 用于生成 sitemap.xml文件(必要选项 url站点地址（由于seo中已经定义，所以无需再次定义）)
  - gemoji

# 定义Jekyll 不进行加载的文件或文件夹
exclude:
  - .editorconfig
  - .git
  - .jekyll-cache
  - Gemfile
  - Gemfile.lock
  - mimao.gemspec
  - Dockerfile
  - git_run.sh
  - LICENSE.md
  - README.md

# 启用sass 并指定sass文件夹的路径和名称
sass:
  sass_dir: _sass
  style: compressed

# 配置 markdown 转换器 kramdown
markdown: kramdown
kramdown:
  input: GFM
  # 不忽视 换行符（false 则代表忽视）
  hard_wrap: true
  # fgm 怪癖（怪癖列表）
  # no_auto_typographic 使更接近github上的风格
  gfm_quirks: [paragraph_end,no_auto_typographic]
  # 配置表情符号
  # 允许在GFM中渲染表情符号(默认：false 不开启)
  gfm_emojis: true
  # 启用 coderay高亮模式，但其外部样式还需根据 它所提供的css类名进行自定义
  syntax_highlighter: coderay
  syntax_highlighter_opts:
    line_numbers: null # 不设置行号
    default_lang: txt # 设置默认的语言为 文本

# 配置 全局的永久链接样式（可以使用：页面中的前事项permalink或集合中可以使用其集合中的前事项来覆盖）
permalink: /:collection/:title/:year/:i_month/:i_day/:path

# 定义集合(即：内容合集)
# 使用 yaml的描点和引用 来简化集合中的配置
collection_default_option: &collection_default_option
  permalink: /articles/:collection/:title
  sort_by: index
  output: true
# 声明集合的文件夹
collections_dir: articles
# 声明集合中 对应集合文件夹(在集合文件夹中以_开头的方式命名)
# 这里无需定义label，在集合中有以文件名称 赋值的 label属性(index text的作用，在下面已注明)
collections:
  posts:
    index: 1000
    text: 帖子
  jekyll: 
    <<: *collection_default_option
    index: 0 # 右侧导航栏中的 菜单排序索引(以0开始，依次递增)
    text: jekyll # 右侧导航栏中的 菜单名称
  python: 
    <<: *collection_default_option
    index: 1
    text: python
  github:
    <<: *collection_default_option
    index: -1
    text: github
  
  
  

# 为 静态文件配置一定范围内(path路径指定范围(该路径可使用正则表达式表示))的 front matter 前事项，自定义前事项 可为前事项设置默认值(比如：title layout 等等设置默认值)
# 可使用 {{ site.static_files | where: "image", true }} 进行调用（使用where 配合 ）
defaults:
  - scope:
      path: "assets/img"
    values:
      image: true